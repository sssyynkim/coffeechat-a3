<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Write a Post</title>
    <link rel="stylesheet" href="/main.css" />
    <script src="https://cdn.jsdelivr.net/npm/gif.js@0.2.0/dist/gif.min.js"></script>
    <script src="/js/main.js" defer></script>
  </head>

  <body>
    <%- include('nav.ejs') %>

    <div class="form-container">
      <h1>Write a Post</h1>
      <form
        id="postForm"
        action="/posts/add"
        method="POST"
        enctype="multipart/form-data"
      >
        <input
          type="text"
          id="postTitle"
          name="title"
          placeholder="Title"
          required
        />
        <textarea
          id="postContent"
          name="content"
          placeholder="Content"
          required
        ></textarea>

        <div class="file-upload-container" id="fileUploadContainer">
          <input type="file" id="fileInput" name="img1" accept="image/*" />
          <div class="file-drag-area" id="fileDragArea">
            <p>Drag & Drop your image here or click to select</p>
            <img
              id="filePreview"
              src=""
              alt="Image Preview"
              style="display: none"
            />
          </div>
        </div>

        <div class="gif-creation-container">
          <h3>Create a GIF</h3>
          <textarea
            id="gifText"
            placeholder="Enter your text here..."
          ></textarea>
          <button type="button" id="createGifBtn" class="btn">
            Create GIF
          </button>
          <canvas id="gifCanvas" style="display: none"></canvas>
          <img id="gifPreview" class="gif-preview" style="display: none" />
          <div id="progressContainer" style="display: none">
            <p>Processing: <span id="progressPercentage">0%</span></p>
            <progress id="progressBar" value="0" max="100"></progress>
          </div>
        </div>

        <button type="submit" class="btn">Submit Post</button>
      </form>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const fileInput = document.getElementById("fileInput");
        const fileDragArea = document.getElementById("fileDragArea");
        const filePreview = document.getElementById("filePreview");
        const postForm = document.getElementById("postForm");
        const gifCanvas = document.getElementById("gifCanvas");
        const gifPreview = document.getElementById("gifPreview");
        const progressBar = document.getElementById("progressBar");
        const progressPercentage =
          document.getElementById("progressPercentage");
        const progressContainer = document.getElementById("progressContainer");
        let gifBlob = null;
        let selectedFile = null;

        // Initialize WebSocket connection to AWS API Gateway WebSocket API
        const webSocket = new WebSocket(
          "wss://5sfewaqotj.execute-api.ap-southeast-2.amazonaws.com/production/"
        );

        webSocket.onopen = function (event) {
          console.log("WebSocket connected:", event);
        };

        webSocket.onmessage = function (event) {
          const data = JSON.parse(event.data);

          if (data.type === "upload-progress") {
            console.log(`Upload Progress: ${data.progress}%`);
            progressBar.value = data.progress;
            progressPercentage.textContent = `${data.progress}%`;
          } else if (data.type === "chat") {
            console.log(`Chat message: ${data.message}`);
          }
        };

        webSocket.onclose = function (event) {
          console.log("WebSocket closed:", event);
          alert("WebSocket connection closed. Trying to reconnect...");

          // 재연결 로직
          setTimeout(() => {
            webSocket = new WebSocket(
              "wss://5sfewaqotj.execute-api.ap-southeast-2.amazonaws.com/production/"
            );
          }, 5000); // 5초 후에 재연결 시도
        };

        // Function to send a message via WebSocket
        // WebSocket을 통해 메시지 전송하는 함수
        window.sendMessage = function (message) {
          if (webSocket.readyState === WebSocket.OPEN) {
            webSocket.send(
              JSON.stringify({ action: "sendMessage", data: message }) // 메시지를 JSON으로 포맷
            );
            console.log("Message sent to server:", message);
          } else {
            console.error("WebSocket is not open. Message not sent.");
          }
        };

        // When form is submitted, send message via WebSocket
        postForm.addEventListener("submit", function (event) {
          event.preventDefault();
          const postTitle = document.getElementById("postTitle").value;
          const postContent = document.getElementById("postContent").value;

          // Send post data as a message through WebSocket
          sendMessage(`Title: ${postTitle}, Content: ${postContent}`, "chat");

          // Proceed with form submission
          postForm.submit();
        });

        fileInput.addEventListener("change", handleFileSelect);
        fileDragArea.addEventListener("dragover", handleDragOver);
        fileDragArea.addEventListener("drop", handleFileDrop);

        async function handleFileSelect(event) {
          const file = event.target.files[0];
          selectedFile = file;
          if (file) {
            filePreview.src = URL.createObjectURL(file);
            filePreview.style.display = "block";

            sendMessage(file.name, "upload");

            const preSignedUrl = await getPreSignedUrl(file.name);
            if (preSignedUrl) {
              await uploadFileToS3(file, preSignedUrl);
            }
          }
        }

        function handleDragOver(event) {
          event.preventDefault();
          fileDragArea.classList.add("drag-over");
        }

        function handleFileDrop(event) {
          event.preventDefault();
          fileDragArea.classList.remove("drag-over");
          const file = event.dataTransfer.files[0];
          selectedFile = file;
          if (file) {
            filePreview.src = URL.createObjectURL(file);
            filePreview.style.display = "block";

            sendMessage(file.name, "upload");

            getPreSignedUrl(file.name).then((preSignedUrl) => {
              if (preSignedUrl) {
                uploadFileToS3(file, preSignedUrl);
              }
            });
          }
        }

        const createGifBtn = document.getElementById("createGifBtn");
        createGifBtn.addEventListener("click", () => {
          const gifText = document.getElementById("gifText").value;
          const gif = new GIF({
            workers: 2,
            quality: 10,
            workerScript:
              "https://cdn.jsdelivr.net/npm/gif.js@0.2.0/dist/gif.worker.js",
          });

          for (let i = 0; i < 10; i++) {
            const context = gifCanvas.getContext("2d");
            context.clearRect(0, 0, gifCanvas.width, gifCanvas.height);
            context.font = "30px Arial";
            context.fillStyle = "black";
            context.fillText(gifText, 50, 50 + i * 5);
            gif.addFrame(gifCanvas, { copy: true, delay: 200 });
          }

          gif.on("progress", (progress) => {
            const percentage = Math.round(progress * 100);
            progressBar.value = percentage;
            progressPercentage.textContent = `${percentage}%`;
          });

          gif.on("finished", async (blob) => {
            console.log("GIF created!");
            gifBlob = blob;
            gifPreview.src = URL.createObjectURL(gifBlob);
            gifPreview.style.display = "block";

            const preSignedUrl = await getPreSignedUrl("generated.gif");
            if (preSignedUrl) {
              await uploadGifToS3(gifBlob, preSignedUrl);
            }
          });

          gif.render();
          progressContainer.style.display = "block";
        });

        async function getPreSignedUrl(fileName) {
          try {
            const response = await fetch(
              `/posts/presigned-url?fileName=${fileName}`
            );
            const data = await response.json();
            return data.url;
          } catch (error) {
            console.error("Error fetching pre-signed URL:", error);
          }
        }

        const uploadFileToS3 = async (file, preSignedUrl) => {
          try {
            const response = await fetch(preSignedUrl, {
              method: "PUT",
              body: file,
              headers: {
                "Content-Type": file.type,
              },
            });
            if (response.ok) {
              console.log("File uploaded successfully");
            } else {
              console.error("File upload failed");
            }
          } catch (error) {
            console.error("Error uploading file:", error);
          }
        };

        const uploadGifToS3 = async (gifBlob, preSignedUrl) => {
          try {
            const response = await fetch(preSignedUrl, {
              method: "PUT",
              body: gifBlob,
              headers: {
                "Content-Type": "image/gif",
              },
            });
            if (response.ok) {
              console.log("GIF uploaded successfully");
            } else {
              console.error("GIF upload failed");
            }
          } catch (error) {
            console.error("Error uploading GIF:", error);
          }
        };
      });
    </script>
  </body>
</html>
